--no_cache

---update for reservations after 9/16
with reservation_time as (
  
select 
r.id as reservation_id

, max(dai.client_date) -max(dao.client_date) as "Time Actual"
,extract(hours from (max(dai.client_date) -max(dao.client_date))) +
    case
    when extract(minutes from (max(dai.client_date) -max(dao.client_date))) > 0 and 
      extract(minutes from (max(dai.client_date) -max(dao.client_date))) <= 15 then .25

    when extract(minutes from (max(dai.client_date) -max(dao.client_date))) > 15 and 
      extract(minutes from (max(dai.client_date) -max(dao.client_date))) <= 30 then .50

    when extract(minutes from (max(dai.client_date) -max(dao.client_date))) > 30 and 
      extract(minutes from (max(dai.client_date) -max(dao.client_date))) <= 45  then .75

    when extract(minutes from (max(dai.client_date) -max(dao.client_date))) > 45 then 1

    when extract(minutes from (max(dai.client_date) -max(dao.client_date))) = 0  then 0
    end

as "Time Rounded"

from reservations r

join reservation_statuses rs on rs.reservation_id = r.id and canceled = 'f' and status = 'finalized'

left join date_adjustments dao on dao.reservation_id = r.id and dao.type = 'OutDateAdjustment'
left join date_adjustments dai on dai.reservation_id = r.id and dai.type = 'InDateAdjustment'
  
  
  where [r.pickup_date=daterange]
  group by 1
  
  ),

reservation_base_charge as (
  
  select
  r.id as reservation_id
  ,case

  when q.type = 'hourly' and rt."Time Rounded" <= minimum then (q.base_rate/100.00) * q.minimum
  when q.type = 'hourly' and rt."Time Rounded" > minimum then (q.base_rate/100.00) * rt."Time Rounded"
  when q.type = 'transfer' then (q.base_rate/100.00)
  end as Charge
  
  from reservations r 
  join quotes q on q.reservation_id = r.id
  join reservation_time rt on rt.reservation_id = r.id
  join reservation_statuses rs on rs.reservation_id = r.id and canceled = 'f' and status = 'finalized'
  where [r.pickup_date=daterange]

  ),

incidental as (
  
  select 
  r.id as reservation_id 
  ,sum(client_amount)/100.00 as amount
  from reservations r
  join incidentals i on i.reservation_id = r.id
  group by 1
  ),
  

res_sum_update as (
  
select
 
r.id
,q.type
,rt."Time Rounded" as "Trip Time" 
,q.base_rate/100.00 as "Base Rate"
,case
    when q.type = 'transfer' then 'Transfer'
    when q.type = 'hourly' then q.minimum::text
    end as "Minimum"

,rb.charge as "Client Base Charge"

,q.discount_percentage/10000.00 as "Discount"

, rb.charge * (q.discount_percentage/10000.00)  as "Discounted Amount"

,q.special_handling_percentage/10000.00 as "Special Handling"

,rb.charge * (q.special_handling_percentage/10000.00)  as "Special Handling Amount"

,rb.charge * (1 - (((q.discount_percentage) - (q.special_handling_percentage))/10000.00)) as "Client Sub Total"

,i.amount as "Incidentals"

,((rb.charge * (1 - (((q.discount_percentage) - (q.special_handling_percentage))/10000.00)))
 + i.amount) as "Total Charge"

,(coalesce(rf.amount/100.00, 0 )) + (coalesce(comp.client_amount/100.00,0)) as "Compensation"

, case when

((rb.charge * (1 - (((q.discount_percentage) - (q.special_handling_percentage))/10000.00)))
 + i.amount) - ((coalesce(rf.amount/100.00, 0 )) + (coalesce(comp.client_amount/100.00,0))) < 0 then 0
  else 
((rb.charge * (1 - (((q.discount_percentage) - (q.special_handling_percentage))/10000.00)))
 + i.amount) - ((coalesce(rf.amount/100.00, 0 )) + (coalesce(comp.client_amount/100.00,0)))
end as "Final Total"

from reservations r

join reservation_statuses rs on rs.reservation_id = r.id and canceled = 'f' and status = 'finalized'
join reservation_time rt on rt.reservation_id = r.id
join reservation_base_charge rb on r.id = rb.reservation_id
join quotes q on q.reservation_id = r.id 
left join incidental i on i.reservation_id = r.id
left join compensations comp on comp.reservation_id = r.id
left join refunds rf on rf.reservation_id = r.id

where r.pickup_date >= '10/1/16' 
),


--- Original for reservation Before 10/16 ---


converted_compensations as (
    select
      reservation_id
      , (client_amount::numeric/100) as client_amount
    from compensations
), reservations_to_sum as (
    select
      r.*
      , coalesce((r.quote_final_amount - coalesce(refunds.refund_total,0)),0)       as revenue
  
      , coalesce( (coalesce(r.quote_discount,0) * .01 * (r.quote_adjusted_base_rate * coalesce(r.quote_billed_hours,1)))
                  + coalesce(comp.client_amount,0) + coalesce(refunds.refund_total,0),0) as savings
      , case
        when (r.quote_adjusted_base_rate * coalesce(r.quote_billed_hours,1)) + i.client_total  > 0
          then (r.quote_adjusted_base_rate * coalesce(r.quote_billed_hours,1)) + i.client_total
        else 0
        end as rack_rate
      , case
        when (r.quote_adjusted_client_rate * coalesce(r.quote_billed_hours,1))
             - coalesce(comp.client_amount,0) - coalesce(refunds.refund_total,0) > 0
          then (r.quote_adjusted_client_rate * coalesce(r.quote_billed_hours,1))
               - coalesce(comp.client_amount,0) - coalesce(refunds.refund_total,0)
        else 0
        end as base_amount
      , case
        when (r.quote_adjusted_client_rate * coalesce(r.quote_billed_hours,1))
             - coalesce(comp.client_amount,0) - coalesce(refunds.refund_total,0) > 0
          then .05 * ((r.quote_adjusted_client_rate * coalesce(r.quote_billed_hours,1))
                     - coalesce(comp.client_amount,0) - coalesce(refunds.refund_total,0))
        else 0
        end as commission

    from rp_reservations r
      join rp_billable_reservations on rp_billable_reservations.reservation_id=r.id
      left join rp_reservation_incidentals i on i.reservation_id=r.id
      left join rp_refund_totals refunds on r.id = refunds.reservation_id
      left join converted_compensations comp on r.id = comp.reservation_id
    where r.invoice_id is not null
          and r.invoice_id <> 88888888
          and r.group_id is null
          and r.savoya_pickup_date > to_date('02/15/16','mm/dd/yy')
)

select
    r.local_pickup_date as "Date"
  , 'BCD M&E'                                  as "Company"
  , case c.id
    when 10173290 then 'Hitachi Data Systems'
    when 10190809 then 'DCRI'
    when 10192949 then 'SEIU'
    when 10196549 then 'Shaw Communications'
    when 10165169 then 'Sanofi Aventis de Mexico'
    when 10194949 then 'Herbalife'
    when 10195949 then 'Metlife- Travel'
    when 10150352 then 'Pfizer - New York'
    when 10160090 then 'BCD M&E'
    when 10123827 then 'BCD M&E - Travel'
    when 10125299 then 'Universal Meeting Management, Inc.'
    when 10197789 then 'Mercedes Benz'
    when 10167589 then 'Honeywell'
    when 10192229 then 'ViiV HealthCare'
    when 10156015 then 'Pfizer - Philadelphia'
    when 10186109 then 'Kaleo, Inc.'
    when 10193269 then 'RHSC'
    when 10196409 then 'Bank of America'
    when 10197811 then 'Vertex'
    when 10153473 then 'Pfizer - New London'
    when 10170132 then 'Pfizer - Collegeville'
    when 10181829 then 'GSK'
    when 10172910 then 'Fiserv'
    when 10174073 then 'Cisco'
    when 10168029 then 'DuPont'
    when 10197871 then 'Mercer'
    when 10197886 then 'Pearle Vision'
    when 10197892 then 'Roche'
    when 10195529 then 'Merck Sharp & Dohme'
    when 10198300 then 'Zibrant'
    else c.name
    end                                        as "Client's Customer"
  , r.id as "Reservation Number"
  , to_char(r.local_pickup_time,'HH:MM PM') as "Pickup Time"
  , pax.names as "Passenger Name"
  , concat(tcp.first_name, ' ', tcp.last_name) as "Travel Coordinator"
  , sa.name                                    as "Market"
  , case when r.local_pickup_date < '10/1/16' then r.revenue
         when r.local_pickup_date >= '10/1/16' then ru."Total Charge" 
         end as "Revenue"
  , case when r.local_pickup_date < '10/1/16' then  r.rack_rate 
         when r.local_pickup_date >= '10/1/16' then ru."Client Base Charge"
         end as "Vehicle All-Inclusive (Pre-Discount)"
  , case when r.local_pickup_date < '10/1/16' then  r.savings 
         when r.local_pickup_date >= '10/1/16' then ru."Discounted Amount"
         end as "Savings"
  , case when r.local_pickup_date < '10/1/16' then r.base_amount                  
         when r.local_pickup_date >= '10/1/16' then ru."Client Sub Total"
         end as "Vehicle Base Rate Charges"
  , case when r.local_pickup_date < '10/1/16' then r.commission  
         when r.local_pickup_date >= '10/1/16' then (ru."Client Sub Total"* .05)
         end as "Commission"

from reservations_to_sum r
  join reservation_statuses rs on rs.reservation_id = r.id and rs.canceled = 'f'
  join rp_reservation_service_areas rsa on rsa.reservation_id=r.id
  join travel_coordination_profiles tcp on r.tc_id = tcp.id
  join companies c on tcp.company_id = c.id
  left join service_areas sa on sa.id=rsa.service_area_id
  left join res_sum_update ru on ru.id = r.id
join rp_reservation_passenger_names pax on r.id=pax.reservation_id

where [c.id=company]
 and [r.local_pickup_date = daterange]
order by r.local_pickup_date
