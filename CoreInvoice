--no_cache
with
    reservations_to_consider as (
      select
        r.*
        , c.name                                                       as company_name
        , c.id                                                         as company_id
        , q.minimum
        , concat(tcp.first_name, ' ', tcp.last_name)                   as tc_name
        , q.type                                   as quote_type
        , q.base_rate / 100.0  as adjusted_base_rate
        , q.special_handling_percentage :: numeric / 100    as special_handling
        , q.discount_percentage :: numeric / 10000          as discount
        , coalesce(comp.client_amount/100.0, 0)                              as comp
        , coalesce(refunds.amount/100.0, 0)                                  as refund
      from reservations r
        join quotes q on r.id = q.reservation_id
        join travel_coordination_profile_assignments tcpa on r.id = tcpa.reservation_id
        join travel_coordination_profiles tcp on tcpa.travel_coordination_profile_id = tcp.id
        join companies c on tcp.company_id = c.id 
        join reservation_statuses rs on r.id = rs.reservation_id and rs.status = 'finalized'
        left join refunds on r.id = refunds.reservation_id
        left join compensations comp on r.id = comp.reservation_id

      where (c.source_id in 
      (10154429,10158413,10163732,10176869,10180209,10186229,10186529,10188189,10189109,10191389,10194849,10196869,10197509,10184691,10186669,10186789,10189769,10192489,10196749,10131863,10171849,10173638,10176232,10182489,10184690,10185849,10186189,10186489,10191189,10155149,10156931,10164229,10178751,10179249,10185569,10191709,10194629,10194989) or c.id = 10198314)
      
             and r.pickup_date between '2016-02-11 16:00:00.00' and '2017-01-01 00:00:00.00'  
  ),  

date_adjustments_report as (
      select
        reservation_id
        , MAX(
              case date_adjustments.type
              when 'OutDateAdjustment'
                then client_date
              else null
              end
          ) as garage_out_date
        , MAX(
              case date_adjustments.type
              when 'OnboardDateAdjustment'
                then client_date
              else null
              end
          ) as pickup_date
        , MAX(
              case date_adjustments.type
              when 'DropoffDateAdjustment'
                then client_date
              else null
              end
          ) as dropoff_date
        , MAX(
              case date_adjustments.type
              when 'InDateAdjustment'
                then client_date
              else null
              end
          ) as garage_in_date
      from date_adjustments
        join reservations_to_consider r on r.id = reservation_id
      group by reservation_id
  ), 

billed_hours as (
    select
      reservation_id
      , (extract(hours from (da.garage_in_date - da.garage_out_date))) +
        (case
         when (extract(minutes from (da.garage_in_date - da.garage_out_date))) > 0
              and (extract(minutes from (da.garage_in_date - da.garage_out_date))) < 15 then .25
         when (extract(minutes from (da.garage_in_date - da.garage_out_date))) > 15
              and (extract(minutes from (da.garage_in_date - da.garage_out_date))) < 30 then .50
         when (extract(minutes from (da.garage_in_date - da.garage_out_date))) > 30
              and (extract(minutes from (da.garage_in_date - da.garage_out_date))) < 45 then .75
         when (extract(minutes from (da.garage_in_date - da.garage_out_date))) > 45 then 1
         else 0 end) as time
    from date_adjustments_report da
)

select
    r.company_name as "Company"
  , case when r.invoice_id is not null and r.invoice_id <> 88888888 then r.invoice_id :: text
    when r.payment_method_id is not null then 'Credit'
    when r.invoice_id = 88888888 then 'Invoice' end as "INV_ID/CC_ID"
  , r.id as "Reservation"
  , to_char(r.pickup_date :: timestamp at time zone 'UTC' at time zone loc.timezone,'mm/dd/yyyy HH24:MI') as "Pickup Time"
  , p.names as "Passenger Name"
  , r.tc_name as "TC Name"
  , r.group_id as "Group ID"
  , r.reference_number as "Ref Code"
  , r.final_amount/100.0 - r.refund as total_charge
  , (r.adjusted_base_rate * coalesce((case when bh.time > r.minimum then bh.time else r.minimum end),1)) - r.comp - r.refund as base_amount
  , (r.discount * r.adjusted_base_rate * coalesce((case when bh.time > r.minimum then bh.time else r.minimum end),1)) + r.comp + r.refund as discount

from reservations_to_consider r
  join billed_hours bh on r.id = bh.reservation_id
  join rp_res_pax p on p.reservation_id = r.id
  join stops pickup on r.id = pickup.reservation_id and pickup.location_type = 'pickup_location'
  join locations loc on pickup.location_id = loc.id

where r.company_name not ilike '%Daiichi%'
order by 1,4
